/**
 * @file LogTool.idl
 * @brief Defines the toolside interfaces needed by the new LogService  
 *                                                               
 *  @author Georg Hoesch (hoesch@in.tum.de)                          
 *          Cyrille Pontvieux (cyrille.pontvieux@edu.univ-fcomte.fr) 
 *         
 * @section License                                                      
 * |LICENSE|
 */
#ifndef _LOGTOOL_IDL_
#define _LOGTOOL_IDL_

#include "LogTypes.idl"

/**
 * This file defines everything needed to attach a tool
 * to the core
 */


/**
 * Errorlevel constants for connectTool, disconnectTool,
 * addFilter and removeFilter
 */
// const short LS_OK = 0; defined in the LogTypes.idl
/**
 * @brief The error for an existing tool
 */
const short LS_TOOL_CONNECT_ALREADYEXISTS = 1;

/**
 * @brief The error for disconnecting a non existing tool
 */
const short LS_TOOL_DISCONNECT_NOTEXISTS = 1;

/**
 * @brief The error for adding a filter on a non existent tool
 */
const short LS_TOOL_ADDFILTER_TOOLNOTEXISTS = 1;
/**
 * @brief The error for adding a filter already existing
 */
const short LS_TOOL_ADDFILTER_ALREADYEXISTS = 2;

/**
 * @brief The error for removing a filter on a non existent tool
 */
const short LS_TOOL_REMOVEFILTER_TOOLNOTEXISTS = 1;
/**
 * @brief The error for removing a filter that does not exist (anymore)
 */
const short LS_TOOL_REMOVEFILTER_NOTEXISTS = 2;

/**
 * @brief The error for flushing the filter of a non existing tool
 */
const short LS_TOOL_FLUSHFILTERS_TOOLNOTEXISTS = 1;

/**
 * @brief Complete configuration of a filter
 */
struct filter_t
{
  /**
   * @brief Name of the filter
   */
  string filterName;
  /**
   * @brief List of tags in the filter
   */
  tag_list_t tagList;
  /**
   * @brief List of the components following the filter
   */
  component_list_t componentList;
};

/**
 * @brief Define callback functions the tool has to implement so 
 * that the monitor can actively forward messages to the
 * tool. Active MessagePulling from the tool is not possible
 * in the moment.
 * @section ToolMsgReceiverIDL
 */
interface ToolMsgReceiver
{
  /**
   * @brief Receive a buffer of messages. The messages are ordered in the
   * sequence. Older messages will be at the beginning of the sequence,
   * younger(newer) messages at the end. 
   * @param msgBuf the message to send
   */
  oneway void
  sendMsg(in log_msg_buf_t msgBuf);
};

/**
 * @brief methods offered by the core to allow tools to attach
 * and configure filters
 * @section LogCentralToolIDL
 */
interface LogCentralTool
{
  /**
   * @brief Do nothing but usefull to be sure that the object is reachable
   */
  void
  test();

  /**
   * @brief Connect a Tool with its toolName, which must be unique among all
   * tools. The return value indicates the success of the connection.
   * If ALREADYEXISTS is returned, the tool could not be attached, as
   * the specified toolName already exists. In this case the tool must
   * reconnect with another name before specifying any filters. If the 
   * tool sends an empty toolName, the LogCentral will provide a unique
   * toolName and pass it back to the tool.
   * @param toolName The name of the tool (filled if not given)
   * @param msgReceiver The message receiver
   * @return An error code
   */
  short
  connectTool(inout string toolName, in string msgReceiver);

  /**
   * @brief Disconnects a connected tool from the monitor. No further 
   * filterconfigurations should be sent after this call. The 
   * toolMsgReceiver will not be used by the monitor any more 
   * after this call. Returns NOTCONNECTED if the calling tool
   * was not connected.
   * @param toolName The name of the tool (filled if not given)
   * @return An error code
   */
  short
  disconnectTool(in string toolName);

  /**
   * @brief Returns a list of possible tags. This is just a convenience
   * functions and returns the values that are specified in a
   * configuration file. If the file is not up to date, the 
   * application may generate more tags than defined in this
   * list.
   * @return The list of defined tags
   */
  tag_list_t
  getDefinedTags();

  /**
   * @brief Returns a list of actually connected Components. This is just
   * a convenience function, as the whole state of the system will
   * be sent to the tool right after connection (in the form of
   * messages)
   * @return The list of the defined components
   */  
  component_list_t
  getDefinedComponents();

  /**
   * @brief Create a filter for this tool on the monitor. Messages matching
   * this filter will be forwarded to the tool. The filter will be
   * identified by its name, which is a part of filter_t. A tool
   * can have as much filters as it wants. Returns ALREADYEXISTS if
   * another filter with this name is already registered.
   * @param toolName The name of the tool
   * @param filter The filter to add
   * @return An error code
   */
  short
  addFilter(in string toolName, in filter_t filter);

  /**
   * @brief Removes a existing filter from the tools filterList. The filter
   * will be identified by its name in the filter_t. If the specified
   * filter does not exist, NOTEXISTS is returned.
   * @param toolName The name of the tool
   * @param filterName The name of the filter to remove
   * @return An error code
   */
  short
  removeFilter(in string toolName, in string filterName);

  /**
   * @brief Removes all defined filters.
   * @param toolName The name of the tool to remove all its filters
   */
  short
  flushAllFilters(in string toolName);
};

#endif
