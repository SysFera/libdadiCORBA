/**
 * @file LogToolFwdr.idl
 * @brief Defines the toolside interfaces needed by the new LogService 
 *                                                              
 *  @author Georg Hoesch (hoesch@in.tum.de)                         
 *          Cyrille Pontvieux (cyrille.pontvieux@edu.univ-fcomte.fr)
 *  
 * @section License                                                            
 * |LICENSE|                                                    
 */
#ifndef _LOGTOOLFWDR_IDL_
#define _LOGTOOLFWDR_IDL_

#include "LogTypes.idl"

#include "LogTool.idl"

/**
 * @brief ToolMsgReceiver interface
 * @class ToolMsgReceiverFwdr
 */
interface ToolMsgReceiverFwdr : ToolMsgReceiver {

};

/**
 * @brief The forwarder version. For the documentation
 * of the class see ToolMsgReceiver. All methods have
 * an objName param that represents the name of the
 * object, to know if it is local or distant
 */
interface ToolMsgReceiverForwarder
{
  oneway void
  sendMsg(in log_msg_buf_t msgBuf, in string objName);
};

/**
 * @brief log central tool interface
 * @class LogCentralToolFwdr
 */
interface LogCentralToolFwdr : LogCentralTool{

};

/**
 * @brief The forwarder version. For the documentation
 * of the class see LogCentralTool. All methods have
 * an objName param that represents the name of the
 * object, to know if it is local or distant
 */
interface LogCentralToolForwarder
{
  short
  connectTool(inout string toolName, in string msgReceiver, in string objName);
  short
  disconnectTool(in string toolName, in string objName);
  tag_list_t
  getDefinedTags(in string objName);
  component_list_t
  getDefinedComponents(in string objName);
  short
  addFilter(in string toolName, in filter_t filter, in string objName);
  short
  removeFilter(in string toolName, in string filterName, in string objName);
  short
  flushAllFilters(in string toolName, in string objName);
};

#endif
