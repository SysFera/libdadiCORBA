/**
 * @file common_types.idl
 * @brief SysFera-DS IDL types for SeD registration and client request (init steps)     
 *                                                                          
 *  @author                                                             
 *          - Philippe COMBES (Philippe.Combes@ens-lyon.fr)                       
 *          - Frederic LOMBARD (Frederic.Lombard@lifc.univ-fcomte.fr)             
 *          - Kevin Coulomb (kevin.coulomb@sysfera.com)
 *                                                                          
 * @section Licence
 *   |LICENSE|
 */


#ifndef _COMMON_TYPES_IDL_
#define _COMMON_TYPES_IDL_

/**
 * @brief A sequence of any objects
 */
typedef sequence<any>    SeqAny;
/**
 * @brief A sequence of doubles
 */
typedef sequence<double> SeqDouble;
/**
 * @brief A sequence of long
 */
typedef sequence<long>   SeqLong;
/**
 * @brief A sequence of char
 */
typedef sequence<char>   SeqChar;
/**
 * @brief A sequence of string
 */
typedef sequence<string> SeqString;

/**
 * @brief The object name is not valid. 
 */
exception BadNameException {
  /**
   * @brief The "bad" name
   */
  string name;
  /**
   * @brief The function that raises the exception
   */
  string function;
  /**
   * @brief The name of the forwarder
   */
  string forwarder_name;
};
/**
 * @brief The name does not refer to a registered object. 
 */
exception UnknownObject {
  /**
   * @brief The unknown named object
   */
  string name;
};

/****************************************************************************/
/* DATA PERISTENCY: Data Description for Data Manager                       */
/****************************************************************************/

/**
 * @brief State of the data 
 */
enum occupationFlag {DIET_FREE, DIET_INUSE, DIET_TRANSFERT};
/**
 * @brief Flag used to manage data coherence: data only registered on one Data Manager
 */
enum kleenexFlag {DIET_ORIGINAL, DIET_KLEENEXCOPY};

/** 
 * @brief Structure of the Data Identifier 
 */
struct corba_data_id_t {
  /**
   * @brief The id of the data
   */
  string idNumber;
  /**
   * @brief A copy of the data
   */
  kleenexFlag dataCopy;
  /**
   * @brief How to handle the data
   */
  occupationFlag state;
};


/****************************************************************************/
/* REGISTRATON _ Data description                                           */
/* Mapping for the diet_data_desc_t type                                    */
/****************************************************************************/

/**
 * @brief Simple complex mapping 
 */
struct corba_scomplex_t {
  /**
   * @brief Real part
   */
  float r;
  /**
   * @brief Imaginary part
   */
  float i;
};
/**
 * @brief Double complex mapping 
 */
struct corba_dcomplex_t {
  /**
   * @brief Real part
   */
  double r;
  /**
   * @brief Imaginary part
   */
  double i;
};

/**
 * @brief Mapping for struct diet_scalar_specific 
 */
struct corba_scalar_specific_t {
  /**
   * @brief The value
   */
  any value;
};

/**
 * @brief Mapping for struct diet_vector_specific 
 */
struct corba_vector_specific_t {
  /**
   * @brief The size
   */
  long size;
};

/**
 * @brief Mapping fo structr diet_matrix_specific 
 */
struct corba_matrix_specific_t {
  /**
   * @brief The number of row
   */
  long nb_r;
  /**
   * @brief The number of column
   */
  long nb_c;
  /**
   * @brief The order
   */
  long order;
};

/**
 * @brief Mapping for struct diet_string_specific 
 */
struct corba_string_specific_t {
  /**
   * @brief The length of the string
   */
  long length;
};

/**
 * @brief Mapping for struct diet_paramstring_specific 
 */
struct corba_paramstring_specific_t {
  /**
   * @brief The length of the string
   */
  long length;
  /**
   * @brief Parameters for the string
   */
  string param;
};

/**
 * @brief Mapping for struct diet_file_specific 
 */
struct corba_file_specific_t {
  /**
   * @brief The size of the file
   */
  long size;
  /**
   * @brief The path to the file
   */
  string path;
};

/**
 * @brief Mapping for struct diet_container_specific 
 */
struct corba_container_specific_t {
  /**
   * @brief The size of the container
   */
  long size;
};

/**
 * @brief Descriptor
 * The field 'type' in diet_data_desc_t is the discriminant of union field
 */
union type switch (long) {
 case 0:
   /**
    * @brief Scalar type
    */
   corba_scalar_specific_t scal;
 case 1:
   /**
    * @brief Vector type
    */
   corba_vector_specific_t vect;
 case 2:
   /**
    * @brief Matrix type
    */
   corba_matrix_specific_t mat;
 case 3:
   /**
    * @brief String type
    */
   corba_string_specific_t str;
 case 4:
   /**
    * @brief ParamString type
    */
   corba_paramstring_specific_t pstr;
 case 5:
   /**
    * @brief File type
    */
   corba_file_specific_t   file;
 case 6:
   /**
    * @brief Container type
    */
   corba_container_specific_t   cont;
};

/**
 * @brief Description of a data
 */
struct corba_data_desc_t {
/**
 * @brief The id of the data
 */
  corba_data_id_t id;
/**
 * @brief The mode of access to the data
 */
  long mode;
/**
 * @brief Type primitif de diet
 */
  long base_type;
/**
 * @brief TODO
 */
  type specific;
};
/**
 * @brief Sequence of corba data
 */
typedef sequence<corba_data_desc_t> SeqCorbaDataDesc_t;


/****************************************************************************/
/* REGISTRATON _ Service description                                        */
/****************************************************************************/

/** 
 * @brief Argument descriptor 
 */
struct corba_arg_desc_t {
  /**
   * @brief THe SysFera-DS basic type of the argument
   */
  long base_type;
  /**
   * @brief The type of the argument
   */
  long type;
};

/**
 * @brief server estimate aggregation
 */
struct corba_agg_default_t {
  /**
   * @brief TODO
   */
  octet dummy;
};

/**
 * @brief server estimate aggregation priority
 */
struct corba_agg_priority_t {
  /**
   * @brief The ordered list of the priorities
   */
  sequence<long> priorityList;
};
/**
 * @brief New : The aggregator for user scheduler support.      
 * The same as the default aggregator. Maybe not needed. 
 * @union corba_agg_specific_t
 */
union corba_agg_specific_t switch (long) {
 case 0:
   /**
    * @brief Default aggregator
    */
   corba_agg_default_t agg_default;
 case 1:
   /**
    * @brief Priority aggregator
    */
   corba_agg_priority_t agg_priority;
};

/**
 * @brief Descriptor for agregator
 */
struct corba_aggregator_desc_t {
  /**
   * @brief The aggregator
   */
  corba_agg_specific_t agg_specific;
};

/**
 * @brief Service profile descriptor (mapping for diet_profile_desc_t) 
 */
struct corba_profile_desc_t {
  /**
   * @brief The service name
   */
  string path;
  /**
   * @brief The position of the last input parameter
   */
  long   last_in;
  /**
   * @brief The position of the last inout parameter
   */
  long   last_inout;
  /**
   * @brief The position of the last output parameter
   */
  long   last_out;
  /**
   * @brief The description of the parameters
   */
  sequence<corba_arg_desc_t> param_desc;
  /**
   * @brief The aggregator for the service
   */
  corba_aggregator_desc_t aggregator;
};
/**
 * @brief A sequence of profile descriptor
 */
typedef sequence<corba_profile_desc_t> SeqCorbaProfileDesc_t;



/****************************************************************************/
/* REQUEST _ Problem profile description                                    */
/****************************************************************************/

/** 
 * @brief Mapping for diet_data_t 
 */
struct corba_data_t {
  /**
   * @brief The description of the data
   */
  corba_data_desc_t desc;
  /**
   * @brief The value of the data
   */
  SeqChar value;
};
/**
 * @brief A sequence of mapping for diet_data
 */
typedef sequence<corba_data_t> SeqCorbaData_t;

/**
 * @brief Actually, this is an equivalent to a diet_profile_t without the data.
 */
struct corba_pb_desc_t {
  /**
   * @brief The service name
   */
  string path;
  /**
   * @brief The position of the last input parameter
   */
  long   last_in;
  /**
   * @brief The position of the last inout parameter
   */
  long   last_inout;
  /**
   * @brief The position of the last output parameter
   */
  long   last_out;
  /**
   * @brief The description of the parameters
   */
  SeqCorbaDataDesc_t param_desc;
};

/****************************************************************************/
/* REQUEST                                                                  */
/****************************************************************************/
/**
 * @brief A request is associated to an ID, a problem description, and a scheduler.
 */
struct corba_request_t {
  /**
   * @brief The id of the request
   */
  unsigned long     reqID;
  /**
   * @brief The description of the problem
   */
  corba_pb_desc_t   pb;
  /**
   * @brief The serialized scheduler to use
   */
  string            serialized_scheduler;
  /**
   * @brief The max number of server needed
   */
  long              max_srv;
};


/****************************************************************************/
/* ESTIMATION                                                               */
/****************************************************************************/
/**
 * @brief Custom estimation tags
 */
typedef short corba_est_tag_storage_t;

/**
 * @brief Custom estimation value
 */
struct corba_est_value_t {
  /**
   * @brief The tag
   */
  corba_est_tag_storage_t v_tag;
  /**
   * @brief The index
   */
  short                   v_idx;
  /**
   * @brief The value
   */
  double                  v_value;
};
/**
 * @brief A sequence of current estimation value
 */
typedef sequence <corba_est_value_t> SeqEstValue_t;

/**
 * @brief The estimation structure
 * commTimes == Communication times of ALL parameters :
 * the tranfer time of OUT parameters is estimated as if they were IN,
 * which is better than not taking them into account.
 *
 * totalTime stores all communication times + tComp
 */
struct corba_estimation_t {
  /**
   * @brief dynamic storage for performance estimation values 
   */
  SeqEstValue_t estValues;
};


/****************************************************************************/
/* PROFILE (for problem solve)                                              */
/****************************************************************************/

/**
 * @brief The complete problem, sent from client to server. 
 */
struct corba_profile_t {
  /**
   * @brief The last input parameter
   */
  long   last_in;
  /**
   * @brief The last inout parameter
   */
  long   last_inout;
  /**
   * @brief The last output parameter
   */
  long   last_out;
  /**
   * @brief The parameters description
   */
  SeqCorbaData_t parameters;
  /**
   * @brief The id of the diet request
   */
  unsigned long dietReqID ;
  /**
   * @brief The estimation vector
   */
  corba_estimation_t estim;
};

#endif // _COMMON_TYPES_IDL_

