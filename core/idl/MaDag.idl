/**
 * @file MaDag.idl
 *
 * @brief  MA DAG IDL description   
 *
 * @author  Abdelkader Amar (Abdelkader.Amar@ens-lyon.fr)
 *          Benjamin Isnard (Benjamin.Isnard@ens-lyon.fr)
 *
 * @section License
 *   |LICENSE|
 */

#ifndef _MADAG_IDL_
#define _MADAG_IDL_

#include "common_types.idl"

/**
 * @brief MA DAG interface
 * @section MaDagIDL
 */
interface MaDag {
  /**
   * @brief Exception when a service is not found
   */
  exception ServiceNotFound {
    string nodeId;
    string pbName;
    string pbParams;
  };

  /**
   * @brief Exception when a dag is invalid
   */
  exception InvalidDag {
    string info;
  };

  /**
   * @brief Exception when a request is invalid
   */
  exception InvalidRequest {
    string info;
  };

  /**
   * @brief Exception when there is a communication problem
   */
  exception CommProblem {
    string info;
  };

 /**
  * @brief DAG processing
  *
  * @param  dag_desc   dag textual description
  * @param  cltMgrRef  client workflow manager reference
  * @param  wfReqId    submitted request identifier
  * @return dag Id
  */
  long
      processDagWf(in corba_wf_desc_t dag_desc,
                   in string cltMgrRef,
                   in long wfReqId)
      raises(InvalidDag, ServiceNotFound, CommProblem);

  /**
   * @brief Multi DAG processing
   * (when submitted DAG is linked to other DAGs)
   *
   * @param  dag_desc     dag textual description
   * @param  cltMgrRef    client workflow manager reference
   * @param  wfReqId      submitted request identifier
   * @param  release      if false, keep the wf request open after this req
   * @return dag Id
   */

  long
      processMultiDagWf(in corba_wf_desc_t dag_desc,
                        in string cltMgrRef,
                        in long wfReqId,
                        in boolean release)
      raises(InvalidDag, ServiceNotFound, CommProblem);

  /**
   * @brief Get a new workflow request identifier
   * @return TODO
   */
  long getWfReqId();


  /** 
   * @brief Used to test if this process is alive. 
   */
  long ping();

  /**
   * @brief Release a multi-dag
   * @param wfReqId: The id of the multi dag to release
   */
  void
      releaseMultiDag(in long wfReqId)
      raises(InvalidRequest);

  /**
   * @brief Cancel the execution of a dag
   * (execution of running tasks is not stopped)
   */
  void
      cancelDag(in long dagId)
      raises(InvalidDag);

  /**
   * @brief Select type of platform connected to MaDag
   */
  enum pfmType_t { DISTINCT_SERVICES, SAME_SERVICES };

  /**
   * @brief To set the platform type
   *@param pfmType: The type of the platform
   */
  void setPlatformType(in pfmType_t pfmType);

};

#endif // _MADAG_IDL_
