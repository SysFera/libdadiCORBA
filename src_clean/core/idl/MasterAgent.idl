/**
 * @file MasterAgent.idl
 *
 * @brief  DIET master agent IDL description    
 *
 * @author  Sylvain DAHAN (Sylvain.Dahan@lifc.univ-fcomte.fr)
 *
 * @section License
 *   |LICENSE|
 */

#ifndef _MASTER_AGENT_IDL_
#define _MASTER_AGENT_IDL_

#include "Agent.idl"
#include "Dagda.idl"

/**
 * @brief The master agent interface
 * @section MasterAgentIDL
 */
interface MasterAgent : Agent {

  /**
   * @brief Submission function: called by the clients to submit a problem. 
   * @param pb_profile: The profile of the problem
   * @param maxServers: The max number of server
   * @return An error code
   */
  corba_response_t submit(in corba_pb_desc_t pb_profile,
			  in unsigned long maxServers);

  /** 
   * @brief Get number of the current session 
   * @return A session num
   */
  long get_session_num();

  /**
   * @brief get id of the data :  aggregation of numsession and numdata 
   * @return The id of the data
   */
  string get_data_id();

  /** 
   * @brief look up of data identified by id 
   * @param id: The id of the data
   * @return TODO
   */
  unsigned long dataLookUp(in string id);

  /** 
   * @brief get data descriptor 
   * @param argID: ID of the data
   * @return TODO
   */
  corba_data_desc_t get_data_arg(in string argID) raises(Dagda::DataNotFound);

  /**
   * @brief Invoked by client : removal from the platform of the data identified by argID
   * @param argID: ID of the data
   * @return An error code
   */
  long diet_free_pdata(in string argID);

  /**
   * @brief Get the list of Profile available.
   * @param length: TODO
   * @return TODO
   */
  SeqCorbaProfileDesc_t getProfiles(out long length);

#ifdef HAVE_MULTI_MA

  /**
   * @brief MAs federation management 
   * @param masterAgentName: The name of the MA
   * @param myName: TODO
   */
  boolean handShake(in string masterAgentName, in string myName);

  /** 
   * @brief Returns the address of the MA's bind service 
   * @return The address of the bind
   */
  string getBindName();

  /**
   * @brief Send a new request to the MA.
   * @param masterAgentName: The name of the MA
   * @param myName: TODO
   * @param request: The request submitted
   */
  oneway void searchService(in string masterAgentName,
			    in string myName,
			    in corba_request_t request) ;

  /** 
   * @brief Ask to the MA to stop the flooding 
   * @param reqId: TODO
   * @param senderId: TODO
   */
  oneway void stopFlooding(in long reqId, in string senderId) ;

  /** 
   * @brief Response which saids that the service is not found and a new step
   *    of flooding can be achive 
   * @param reqId: TODO
   * @param senderId: TODO
   */
  oneway void serviceNotFound(in long reqId, in string senderId) ;

  /** 
   * @brief Launchs a new step of flooding 
   * @param reqId: TODO
   * @param senderId: TODO
   */
  oneway void newFlood(in long reqId, in string senderId) ;

  /** 
   * @brief Response which saids that no new server can be found via this MA. 
   * @param reqId: TODO
   * @param senderId: TODO
   */
  oneway void floodedArea(in long reqId, in string senderId) ;

  /**
   * @brief response which saids that the MA was already contacted for this
      request. 
   * @param reqId: TODO
   * @param senderId: TODO
   */
  oneway void alreadyContacted(in long reqId,
			       in string senderId) ;

  /** 
   * @brief Response which saids that some servers was found. 
   * @param reqId: TODO
   * @param decision: TODO
   */
  oneway void serviceFound(in long reqId, in corba_response_t decision) ;

#endif // HAVE_MULTI_MA

#ifdef HAVE_WORKFLOW
  /**
   * @brief Workflow submission function. *
   * called by the MA_DAG or a client to submit a set of problems *
   * @param seq_pb:
   */
  wf_response_t submit_pb_set (in corba_pb_desc_seq_t seq_pb);

   /**
    * A submission function used to submit a set of problem to the MA
    *
    * @param pb_seq     sequence of problems
    * @param reqCount   number of requests of the client. The request number is at least
    *                   equal to sequence problem length but it can be greater if a problem
    *                   has to be executed more than one time
    * @param complete   indicates if the response is complete. The function return at the first problem
    *                   that cannot be solved
    * @param firstReqId the first request identifier to be used by the client
    * @param seqReqId   an identifier to the submission (each sequence submission
    *                   has a unique identifier)
    * @return TODO
    */
    response_seq_t
    submit_pb_seq(in corba_pb_desc_seq_t pb_seq,
                  in long reqCount,
                  out boolean complete,
                  out long firstReqId,
                  out long seqReqId);
#endif // HAVE_WORKFLOW
  /**
   * @brief TODO
   * @param key: TODO
   * @param values: TODO
   * @return TODO
   */
  long insertData(in string key, in SeqString values);
};

#endif // _MASTER_AGENT_IDL_
